import React from 'react';
import { connect } from 'react-redux';
import { push } from 'connected-react-router';

import ExampleBox from './ExampleBox';
import firebase from '../../firebase';

import 'string-cosine-similarity'

const SubgoalExamples = props => {
  const examples = [
    {
      subgoal: ["Get an input of N and N numbers.", "Add up the N numbers.", "Divide the calculated sum by N to find an average.", "Print the average."],
      selectedLabels: [ 
        {
          text: 'Creative', 
          clickedNum: 4,
        },
        {
          text: 'Concise', 
          clickedNum: 1
        },
        {
          text: 'Helpful',
          clickedNum: 17
        }
      ],
      notSelectedLabels: [ 
        {
          text: 'Unique',
          clickedNum: 0
        }, 
        {
          text: 'Detailed',
          clickedNum: 0
        }, 
        {
          text: 'Optimal',
          clickedNum: 0
        }
      ]
    },
    {
      subgoal: ["Get N and N numbers.", "Add up all the numbers.", "Divide the sum by the number of the given numbers.", "Print out the calculated average."],
      selectedLabels: [ 
        {
          text: 'Creative', 
          clickedNum: 1
        },
        {
          text: 'Unique',
          clickedNum: 2
        }, 
      ],
      notSelectedLabels: [ 
        {
          text: 'Concise', 
          clickedNum: 0
        },
        {
          text: 'Detailed',
          clickedNum: 0
        }, 
        {
          text: 'Optimal',
          clickedNum: 0
        },
        {
          text: 'Helpful',
          clickedNum: 0
        }
      ]
    },
    {
      subgoal: ["Input", "Sum", "Divide and output"],
      selectedLabels: [ 
        {
          text: 'Concise', 
          clickedNum: 3
        },
      ],
      notSelectedLabels: [ 
        {
          text: 'Creative', 
          clickedNum: 4
        },
        {
          text: 'Unique',
          clickedNum: 0
        }, 
        {
          text: 'Detailed',
          clickedNum: 0
        }, 
        {
          text: 'Optimal',
          clickedNum: 0
        },
        {
          text: 'Helpful',
          clickedNum: 0
        }
      ]
    }
  ];
  const moreExample = {
    subgoal: ["Add the numbers one by one, while incrementing the count.", "Print the sum divided by count."],
    selectedLabels: [ 
      {
        text: 'Detailed',
        clickedNum: 2
      }, 
      {
        text: 'Optimal',
        clickedNum: 1
      },
    ],
    notSelectedLabels: [ 
      {
        text: 'Unique',
        clickedNum: 0
      }, 
      {
        text: 'Creative', 
        clickedNum: 0
      },
      {
        text: 'Concise', 
        clickedNum: 0
      },
      {
        text: 'Helpful',
        clickedNum: 0
      }
     
    ]
  };

  const computeSimilarity = (subgoal, example) => {
    var similarity = require('string-cosine-similarity');

    console.log(similarity(subgoal, example));
  }

  //useEffect(() => {
    // (1) GET problem lists from DB.
    // (2) If 'meta' exists in url, fetch the problem data.
    const meta = props.pathname.split('/')[1];
      firebase
      .firestore()
      .collection('subgoals')
      .doc(meta)
      .get()
      .then(snapshot => {
        const temp = examples;
        //temp[0] = snapshot.docs.map(doc => doc.data());
        const examples_temp = snapshot.data();
        
        // TODO: replace subgoal_str with the subgoals that are actually generated by the user
        var subgoal_str = "";
        for (let i in examples_temp[Object.keys(examples_temp)[0]]){
          subgoal_str += " " + examples_temp[Object.keys(examples_temp)[0]][i]['text'];
        }
        
        for (let key in examples_temp){
          var example_str = "";
          for (let i in examples_temp[key]){
            example_str += " " + examples_temp[key][i]['text'];
          }
          console.log(example_str);
          computeSimilarity(subgoal_str, example_str);
        }
      });
  //});

  const renderExamples = (example, index) => {
    return (
      <ExampleBox
        id={'example-box-' + index}
        key={index}
        index={index}
        example={example}
      />
    )
  };
  return (
    <>
      <div className={"subgoal-examples-conatiner"}>
        {examples.map((example, i) => renderExamples(example, i))}
        {props.moreSubgoal && renderExamples(moreExample, 3)}
      </div>
    </>
  )
};
const mapStateToProps = state => ({
  pathname: state.router.location.pathname,
});

export default connect(mapStateToProps, { push })(SubgoalExamples);